2023-12-24 02:13:53,245:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 02:13:53,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 02:13:53,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 02:13:53,246:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 02:17:03,510:INFO:PyCaret ClassificationExperiment
2023-12-24 02:17:03,511:INFO:Logging name: clf-default-name
2023-12-24 02:17:03,514:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-24 02:17:03,514:INFO:version 3.2.0
2023-12-24 02:17:03,514:INFO:Initializing setup()
2023-12-24 02:17:03,514:INFO:self.USI: 886f
2023-12-24 02:17:03,514:INFO:self._variable_keys: {'log_plots_param', 'X', 'is_multiclass', '_ml_usecase', 'seed', 'gpu_param', 'html_param', 'y', 'exp_id', 'data', 'fold_groups_param', 'X_train', 'USI', 'idx', 'memory', 'gpu_n_jobs_param', 'fix_imbalance', '_available_plots', 'logging_param', 'X_test', 'fold_generator', 'target_param', 'n_jobs_param', 'y_test', 'fold_shuffle_param', 'pipeline', 'y_train', 'exp_name_log'}
2023-12-24 02:17:03,514:INFO:Checking environment
2023-12-24 02:17:03,514:INFO:python_version: 3.10.11
2023-12-24 02:17:03,515:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2023-12-24 02:17:03,515:INFO:machine: AMD64
2023-12-24 02:17:03,515:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-24 02:17:03,534:INFO:Memory: svmem(total=8269619200, available=682115072, percent=91.8, used=7587504128, free=682115072)
2023-12-24 02:17:03,535:INFO:Physical Core: 4
2023-12-24 02:17:03,535:INFO:Logical Core: 8
2023-12-24 02:17:03,535:INFO:Checking libraries
2023-12-24 02:17:03,535:INFO:System:
2023-12-24 02:17:03,535:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2023-12-24 02:17:03,535:INFO:executable: C:\Users\morel\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\python.exe
2023-12-24 02:17:03,535:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-24 02:17:03,535:INFO:PyCaret required dependencies:
2023-12-24 02:17:07,934:INFO:                 pip: 23.0.1
2023-12-24 02:17:07,934:INFO:          setuptools: 65.5.0
2023-12-24 02:17:07,934:INFO:             pycaret: 3.2.0
2023-12-24 02:17:07,934:INFO:             IPython: 8.19.0
2023-12-24 02:17:07,934:INFO:          ipywidgets: 8.1.1
2023-12-24 02:17:07,934:INFO:                tqdm: 4.64.1
2023-12-24 02:17:07,934:INFO:               numpy: 1.23.4
2023-12-24 02:17:07,934:INFO:              pandas: 1.4.3
2023-12-24 02:17:07,934:INFO:              jinja2: 3.1.2
2023-12-24 02:17:07,934:INFO:               scipy: 1.10.1
2023-12-24 02:17:07,934:INFO:              joblib: 1.3.2
2023-12-24 02:17:07,934:INFO:             sklearn: 1.1.2
2023-12-24 02:17:07,934:INFO:                pyod: 1.1.2
2023-12-24 02:17:07,935:INFO:            imblearn: 0.11.0
2023-12-24 02:17:07,935:INFO:   category_encoders: 2.6.3
2023-12-24 02:17:07,935:INFO:            lightgbm: 4.2.0
2023-12-24 02:17:07,935:INFO:               numba: 0.58.1
2023-12-24 02:17:07,935:INFO:            requests: 2.28.1
2023-12-24 02:17:07,935:INFO:          matplotlib: 3.5.3
2023-12-24 02:17:07,935:INFO:          scikitplot: 0.3.7
2023-12-24 02:17:07,935:INFO:         yellowbrick: 1.5
2023-12-24 02:17:07,935:INFO:              plotly: 5.18.0
2023-12-24 02:17:07,935:INFO:    plotly-resampler: Not installed
2023-12-24 02:17:07,935:INFO:             kaleido: 0.2.1
2023-12-24 02:17:07,935:INFO:           schemdraw: 0.15
2023-12-24 02:17:07,935:INFO:         statsmodels: 0.13.2
2023-12-24 02:17:07,935:INFO:              sktime: 0.21.1
2023-12-24 02:17:07,935:INFO:               tbats: 1.1.3
2023-12-24 02:17:07,935:INFO:            pmdarima: 2.0.4
2023-12-24 02:17:07,935:INFO:              psutil: 5.9.7
2023-12-24 02:17:07,935:INFO:          markupsafe: 2.1.1
2023-12-24 02:17:07,935:INFO:             pickle5: Not installed
2023-12-24 02:17:07,935:INFO:         cloudpickle: 3.0.0
2023-12-24 02:17:07,935:INFO:         deprecation: 2.1.0
2023-12-24 02:17:07,935:INFO:              xxhash: 3.4.1
2023-12-24 02:17:07,935:INFO:           wurlitzer: Not installed
2023-12-24 02:17:07,935:INFO:PyCaret optional dependencies:
2023-12-24 02:17:07,956:INFO:                shap: Not installed
2023-12-24 02:17:07,957:INFO:           interpret: Not installed
2023-12-24 02:17:07,957:INFO:                umap: Not installed
2023-12-24 02:17:07,957:INFO:     ydata_profiling: Not installed
2023-12-24 02:17:07,957:INFO:  explainerdashboard: Not installed
2023-12-24 02:17:07,957:INFO:             autoviz: Not installed
2023-12-24 02:17:07,957:INFO:           fairlearn: Not installed
2023-12-24 02:17:07,957:INFO:          deepchecks: Not installed
2023-12-24 02:17:07,957:INFO:             xgboost: Not installed
2023-12-24 02:17:07,957:INFO:            catboost: Not installed
2023-12-24 02:17:07,957:INFO:              kmodes: Not installed
2023-12-24 02:17:07,957:INFO:             mlxtend: Not installed
2023-12-24 02:17:07,957:INFO:       statsforecast: Not installed
2023-12-24 02:17:07,958:INFO:        tune_sklearn: Not installed
2023-12-24 02:17:07,958:INFO:                 ray: Not installed
2023-12-24 02:17:07,958:INFO:            hyperopt: Not installed
2023-12-24 02:17:07,958:INFO:              optuna: Not installed
2023-12-24 02:17:07,958:INFO:               skopt: Not installed
2023-12-24 02:17:07,958:INFO:              mlflow: Not installed
2023-12-24 02:17:07,958:INFO:              gradio: Not installed
2023-12-24 02:17:07,958:INFO:             fastapi: Not installed
2023-12-24 02:17:07,958:INFO:             uvicorn: Not installed
2023-12-24 02:17:07,958:INFO:              m2cgen: Not installed
2023-12-24 02:17:07,958:INFO:           evidently: Not installed
2023-12-24 02:17:07,958:INFO:               fugue: Not installed
2023-12-24 02:17:07,958:INFO:           streamlit: 1.29.0
2023-12-24 02:17:07,958:INFO:             prophet: Not installed
2023-12-24 02:17:07,958:INFO:None
2023-12-24 02:17:07,958:INFO:Set up data.
2023-12-24 02:17:07,970:INFO:Set up folding strategy.
2023-12-24 02:17:07,970:INFO:Set up train/test split.
2023-12-24 02:17:07,982:INFO:Set up index.
2023-12-24 02:17:07,983:INFO:Assigning column types.
2023-12-24 02:17:07,986:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-24 02:17:08,048:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 02:17:08,052:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 02:17:08,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,095:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,150:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 02:17:08,151:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 02:17:08,184:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,184:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,184:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-24 02:17:08,233:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 02:17:08,263:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,314:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 02:17:08,345:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,345:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,346:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-24 02:17:08,425:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,425:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,510:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,510:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,513:INFO:Preparing preprocessing pipeline...
2023-12-24 02:17:08,516:INFO:Set up label encoding.
2023-12-24 02:17:08,517:INFO:Set up simple imputation.
2023-12-24 02:17:08,546:INFO:Finished creating preprocessing pipeline.
2023-12-24 02:17:08,551:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-12-24 02:17:08,551:INFO:Creating final display dataframe.
2023-12-24 02:17:08,637:INFO:Setup _display_container:                     Description                                   Value
0                    Session id                                    2023
1                        Target                                 Species
2                   Target type                              Multiclass
3                Target mapping  setosa: 0, versicolor: 1, virginica: 2
4           Original data shape                                (150, 5)
5        Transformed data shape                                (150, 5)
6   Transformed train set shape                                (105, 5)
7    Transformed test set shape                                 (45, 5)
8              Numeric features                                       4
9                    Preprocess                                    True
10              Imputation type                                  simple
11           Numeric imputation                                    mean
12       Categorical imputation                                    mode
13               Fold Generator                         StratifiedKFold
14                  Fold Number                                       5
15                     CPU Jobs                                      -1
16                      Use GPU                                   False
17               Log Experiment                                   False
18              Experiment Name                        clf-default-name
19                          USI                                    886f
2023-12-24 02:17:08,761:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,764:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,854:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,854:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:17:08,855:INFO:setup() successfully completed in 5.35s...............
2023-12-24 02:19:09,337:INFO:gpu_param set to False
2023-12-24 02:19:09,420:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:19:09,420:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:19:09,486:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:19:09,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 02:20:42,759:INFO:Initializing create_model()
2023-12-24 02:20:42,759:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A726E3B910>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 02:20:42,760:INFO:Checking exceptions
2023-12-24 02:20:42,795:INFO:Importing libraries
2023-12-24 02:20:42,795:INFO:Copying training dataset
2023-12-24 02:20:42,801:INFO:Defining folds
2023-12-24 02:20:42,801:INFO:Declaring metric variables
2023-12-24 02:20:42,804:INFO:Importing untrained model
2023-12-24 02:20:42,810:INFO:Logistic Regression Imported successfully
2023-12-24 02:20:42,823:INFO:Starting cross validation
2023-12-24 02:20:42,826:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2023-12-24 02:20:52,798:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,800:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,802:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,803:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,803:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,803:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,804:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,807:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,808:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,808:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,809:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,810:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,810:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,811:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,811:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:20:52,836:INFO:Calculating mean and std
2023-12-24 02:20:52,843:INFO:Creating metrics dataframe
2023-12-24 02:20:52,878:INFO:Finalizing model
2023-12-24 02:20:53,016:INFO:Uploading results into container
2023-12-24 02:20:53,019:INFO:Uploading model into container now
2023-12-24 02:20:53,043:INFO:_master_model_container: 1
2023-12-24 02:20:53,043:INFO:_display_container: 2
2023-12-24 02:20:53,044:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 02:20:53,044:INFO:create_model() successfully completed......................................
2023-12-24 02:23:29,606:INFO:Initializing predict_model()
2023-12-24 02:23:29,606:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A726E3B910>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A74A6C36D0>)
2023-12-24 02:23:29,607:INFO:Checking exceptions
2023-12-24 02:23:29,607:INFO:Preloading libraries
2023-12-24 02:23:29,690:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:23:29,694:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:23:29,695:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:23:52,718:INFO:Initializing predict_model()
2023-12-24 02:23:52,718:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A726E3B910>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001A749ED6560>)
2023-12-24 02:23:52,718:INFO:Checking exceptions
2023-12-24 02:23:52,719:INFO:Preloading libraries
2023-12-24 02:23:52,822:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:23:52,825:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:23:52,835:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 02:26:20,632:INFO:Initializing plot_model()
2023-12-24 02:26:20,632:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A726E3B910>, system=True)
2023-12-24 02:26:20,632:INFO:Checking exceptions
2023-12-24 02:26:20,644:INFO:Preloading libraries
2023-12-24 02:26:20,644:INFO:Copying training dataset
2023-12-24 02:26:20,644:INFO:Plot type: feature
2023-12-24 02:26:20,934:INFO:Visual Rendered Successfully
2023-12-24 02:26:21,083:INFO:plot_model() successfully completed......................................
2023-12-24 02:29:48,870:INFO:Initializing finalize_model()
2023-12-24 02:29:48,870:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A726E3B910>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2023-12-24 02:29:48,873:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 02:29:48,875:INFO:Initializing create_model()
2023-12-24 02:29:48,875:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001A726E3B910>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 02:29:48,875:INFO:Checking exceptions
2023-12-24 02:29:48,878:INFO:Importing libraries
2023-12-24 02:29:48,878:INFO:Copying training dataset
2023-12-24 02:29:48,878:INFO:Defining folds
2023-12-24 02:29:48,878:INFO:Declaring metric variables
2023-12-24 02:29:48,878:INFO:Importing untrained model
2023-12-24 02:29:48,880:INFO:Declaring custom model
2023-12-24 02:29:48,880:INFO:Logistic Regression Imported successfully
2023-12-24 02:29:48,883:INFO:Cross validation set to False
2023-12-24 02:29:48,883:INFO:Fitting Model
2023-12-24 02:29:48,915:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 02:29:48,915:INFO:create_model() successfully completed......................................
2023-12-24 02:29:49,026:INFO:_master_model_container: 1
2023-12-24 02:29:49,026:INFO:_display_container: 4
2023-12-24 02:29:49,031:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 02:29:49,031:INFO:finalize_model() successfully completed......................................
2023-12-24 02:32:40,774:INFO:Initializing save_model()
2023-12-24 02:32:40,775:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_classifier, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-12-24 02:32:40,775:INFO:Adding model into prep_pipe
2023-12-24 02:32:40,775:WARNING:Only Model saved as it was a pipeline.
2023-12-24 02:32:40,781:INFO:modele_classifier.pkl saved in current working directory
2023-12-24 02:32:40,792:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 02:32:40,793:INFO:save_model() successfully completed......................................
2023-12-24 03:53:19,150:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 03:53:19,151:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 03:53:19,151:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 03:53:19,151:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 03:53:26,317:INFO:Initializing load_model()
2023-12-24 03:53:26,317:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 03:53:26,323:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 03:53:26,324:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 03:53:26,324:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 03:53:26,556:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 04:02:10,258:INFO:Initializing load_model()
2023-12-24 04:02:10,261:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 04:02:10,301:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:02:10,304:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:02:10,308:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:02:10,315:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 04:18:50,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:18:50,153:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:18:50,154:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:18:50,154:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:18:52,701:INFO:Initializing load_model()
2023-12-24 04:18:52,701:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 04:18:52,707:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:18:52,708:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:18:52,709:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:18:52,751:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 04:36:35,817:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:36:35,818:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:36:35,818:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:36:35,818:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:36:37,648:INFO:Initializing load_model()
2023-12-24 04:36:37,648:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 04:36:37,652:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:36:37,653:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:36:37,653:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:36:37,709:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 04:37:46,625:INFO:Initializing load_model()
2023-12-24 04:37:46,626:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 04:37:46,632:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:37:46,633:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:37:46,634:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:37:46,635:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 04:47:37,257:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:47:37,257:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:47:37,257:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:47:37,257:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:47:38,336:INFO:PyCaret ClassificationExperiment
2023-12-24 04:47:38,337:INFO:Logging name: clf-default-name
2023-12-24 04:47:38,337:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-24 04:47:38,337:INFO:version 3.2.0
2023-12-24 04:47:38,337:INFO:Initializing setup()
2023-12-24 04:47:38,337:INFO:self.USI: 1df4
2023-12-24 04:47:38,337:INFO:self._variable_keys: {'seed', 'log_plots_param', 'data', 'X', 'y_train', 'fix_imbalance', 'gpu_param', '_available_plots', 'target_param', 'y_test', 'logging_param', 'html_param', 'idx', 'exp_name_log', 'fold_groups_param', 'n_jobs_param', 'USI', 'fold_shuffle_param', 'exp_id', 'is_multiclass', 'fold_generator', 'X_test', 'pipeline', 'memory', '_ml_usecase', 'gpu_n_jobs_param', 'y', 'X_train'}
2023-12-24 04:47:38,337:INFO:Checking environment
2023-12-24 04:47:38,337:INFO:python_version: 3.10.11
2023-12-24 04:47:38,337:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2023-12-24 04:47:38,338:INFO:machine: AMD64
2023-12-24 04:47:38,338:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-24 04:47:38,348:INFO:Memory: svmem(total=8269619200, available=636456960, percent=92.3, used=7633162240, free=636456960)
2023-12-24 04:47:38,348:INFO:Physical Core: 4
2023-12-24 04:47:38,348:INFO:Logical Core: 8
2023-12-24 04:47:38,348:INFO:Checking libraries
2023-12-24 04:47:38,348:INFO:System:
2023-12-24 04:47:38,348:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2023-12-24 04:47:38,348:INFO:executable: C:\Users\morel\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\python.exe
2023-12-24 04:47:38,348:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-24 04:47:38,348:INFO:PyCaret required dependencies:
2023-12-24 04:47:38,401:INFO:                 pip: 23.0.1
2023-12-24 04:47:38,401:INFO:          setuptools: 65.5.0
2023-12-24 04:47:38,401:INFO:             pycaret: 3.2.0
2023-12-24 04:47:38,401:INFO:             IPython: 8.19.0
2023-12-24 04:47:38,401:INFO:          ipywidgets: 8.1.1
2023-12-24 04:47:38,401:INFO:                tqdm: 4.64.1
2023-12-24 04:47:38,401:INFO:               numpy: 1.23.4
2023-12-24 04:47:38,401:INFO:              pandas: 1.4.3
2023-12-24 04:47:38,401:INFO:              jinja2: 3.1.2
2023-12-24 04:47:38,401:INFO:               scipy: 1.10.1
2023-12-24 04:47:38,401:INFO:              joblib: 1.3.2
2023-12-24 04:47:38,401:INFO:             sklearn: 1.1.2
2023-12-24 04:47:38,401:INFO:                pyod: 1.1.2
2023-12-24 04:47:38,401:INFO:            imblearn: 0.11.0
2023-12-24 04:47:38,401:INFO:   category_encoders: 2.6.3
2023-12-24 04:47:38,401:INFO:            lightgbm: 4.2.0
2023-12-24 04:47:38,401:INFO:               numba: 0.58.1
2023-12-24 04:47:38,401:INFO:            requests: 2.28.1
2023-12-24 04:47:38,401:INFO:          matplotlib: 3.5.3
2023-12-24 04:47:38,402:INFO:          scikitplot: 0.3.7
2023-12-24 04:47:38,402:INFO:         yellowbrick: 1.5
2023-12-24 04:47:38,402:INFO:              plotly: 5.18.0
2023-12-24 04:47:38,402:INFO:    plotly-resampler: Not installed
2023-12-24 04:47:38,402:INFO:             kaleido: 0.2.1
2023-12-24 04:47:38,402:INFO:           schemdraw: 0.15
2023-12-24 04:47:38,402:INFO:         statsmodels: 0.13.2
2023-12-24 04:47:38,402:INFO:              sktime: 0.21.1
2023-12-24 04:47:38,402:INFO:               tbats: 1.1.3
2023-12-24 04:47:38,402:INFO:            pmdarima: 2.0.4
2023-12-24 04:47:38,402:INFO:              psutil: 5.9.7
2023-12-24 04:47:38,402:INFO:          markupsafe: 2.1.1
2023-12-24 04:47:38,402:INFO:             pickle5: Not installed
2023-12-24 04:47:38,402:INFO:         cloudpickle: 3.0.0
2023-12-24 04:47:38,402:INFO:         deprecation: 2.1.0
2023-12-24 04:47:38,402:INFO:              xxhash: 3.4.1
2023-12-24 04:47:38,402:INFO:           wurlitzer: Not installed
2023-12-24 04:47:38,402:INFO:PyCaret optional dependencies:
2023-12-24 04:47:38,420:INFO:                shap: Not installed
2023-12-24 04:47:38,421:INFO:           interpret: Not installed
2023-12-24 04:47:38,421:INFO:                umap: Not installed
2023-12-24 04:47:38,421:INFO:     ydata_profiling: Not installed
2023-12-24 04:47:38,421:INFO:  explainerdashboard: Not installed
2023-12-24 04:47:38,421:INFO:             autoviz: Not installed
2023-12-24 04:47:38,421:INFO:           fairlearn: Not installed
2023-12-24 04:47:38,421:INFO:          deepchecks: Not installed
2023-12-24 04:47:38,421:INFO:             xgboost: Not installed
2023-12-24 04:47:38,421:INFO:            catboost: Not installed
2023-12-24 04:47:38,421:INFO:              kmodes: Not installed
2023-12-24 04:47:38,421:INFO:             mlxtend: Not installed
2023-12-24 04:47:38,421:INFO:       statsforecast: Not installed
2023-12-24 04:47:38,421:INFO:        tune_sklearn: Not installed
2023-12-24 04:47:38,421:INFO:                 ray: Not installed
2023-12-24 04:47:38,421:INFO:            hyperopt: Not installed
2023-12-24 04:47:38,421:INFO:              optuna: Not installed
2023-12-24 04:47:38,421:INFO:               skopt: Not installed
2023-12-24 04:47:38,421:INFO:              mlflow: Not installed
2023-12-24 04:47:38,421:INFO:              gradio: Not installed
2023-12-24 04:47:38,421:INFO:             fastapi: Not installed
2023-12-24 04:47:38,421:INFO:             uvicorn: Not installed
2023-12-24 04:47:38,421:INFO:              m2cgen: Not installed
2023-12-24 04:47:38,421:INFO:           evidently: Not installed
2023-12-24 04:47:38,421:INFO:               fugue: Not installed
2023-12-24 04:47:38,421:INFO:           streamlit: 1.29.0
2023-12-24 04:47:38,421:INFO:             prophet: Not installed
2023-12-24 04:47:38,421:INFO:None
2023-12-24 04:47:38,421:INFO:Set up data.
2023-12-24 04:47:38,428:INFO:Set up folding strategy.
2023-12-24 04:47:38,428:INFO:Set up train/test split.
2023-12-24 04:47:38,441:INFO:Set up index.
2023-12-24 04:47:38,442:INFO:Assigning column types.
2023-12-24 04:47:38,445:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-24 04:47:38,497:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 04:47:38,500:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:47:38,544:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,544:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,594:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 04:47:38,594:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:47:38,632:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,632:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,632:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-24 04:47:38,694:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:47:38,737:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,738:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,795:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:47:38,829:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,829:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,830:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-24 04:47:38,911:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,911:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,997:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:38,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:39,001:INFO:Preparing preprocessing pipeline...
2023-12-24 04:47:39,004:INFO:Set up label encoding.
2023-12-24 04:47:39,004:INFO:Set up simple imputation.
2023-12-24 04:47:39,030:INFO:Finished creating preprocessing pipeline.
2023-12-24 04:47:39,035:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-12-24 04:47:39,035:INFO:Creating final display dataframe.
2023-12-24 04:47:39,105:INFO:Setup _display_container:                     Description                                   Value
0                    Session id                                    2023
1                        Target                                 Species
2                   Target type                              Multiclass
3                Target mapping  setosa: 0, versicolor: 1, virginica: 2
4           Original data shape                                (150, 5)
5        Transformed data shape                                (150, 5)
6   Transformed train set shape                                (105, 5)
7    Transformed test set shape                                 (45, 5)
8              Numeric features                                       4
9                    Preprocess                                    True
10              Imputation type                                  simple
11           Numeric imputation                                    mean
12       Categorical imputation                                    mode
13               Fold Generator                         StratifiedKFold
14                  Fold Number                                       5
15                     CPU Jobs                                      -1
16                      Use GPU                                   False
17               Log Experiment                                   False
18              Experiment Name                        clf-default-name
19                          USI                                    1df4
2023-12-24 04:47:39,217:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:39,218:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:39,308:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:39,308:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:39,309:INFO:setup() successfully completed in 0.98s...............
2023-12-24 04:47:43,473:INFO:gpu_param set to False
2023-12-24 04:47:43,560:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:43,561:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:43,635:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:43,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:47:47,652:INFO:Initializing create_model()
2023-12-24 04:47:47,652:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002068DB9EF80>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 04:47:47,652:INFO:Checking exceptions
2023-12-24 04:47:47,683:INFO:Importing libraries
2023-12-24 04:47:47,683:INFO:Copying training dataset
2023-12-24 04:47:47,686:INFO:Defining folds
2023-12-24 04:47:47,686:INFO:Declaring metric variables
2023-12-24 04:47:47,690:INFO:Importing untrained model
2023-12-24 04:47:47,700:INFO:Logistic Regression Imported successfully
2023-12-24 04:47:47,712:INFO:Starting cross validation
2023-12-24 04:47:47,714:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2023-12-24 04:47:56,480:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,480:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,480:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,481:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,484:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,484:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,484:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,484:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,485:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,487:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,487:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,487:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,492:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:47:56,504:INFO:Calculating mean and std
2023-12-24 04:47:56,518:INFO:Creating metrics dataframe
2023-12-24 04:47:56,577:INFO:Finalizing model
2023-12-24 04:47:56,705:INFO:Uploading results into container
2023-12-24 04:47:56,709:INFO:Uploading model into container now
2023-12-24 04:47:56,734:INFO:_master_model_container: 1
2023-12-24 04:47:56,734:INFO:_display_container: 2
2023-12-24 04:47:56,735:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 04:47:56,736:INFO:create_model() successfully completed......................................
2023-12-24 04:48:29,141:INFO:Initializing predict_model()
2023-12-24 04:48:29,141:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002068DB9EF80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000206B1A539A0>)
2023-12-24 04:48:29,141:INFO:Checking exceptions
2023-12-24 04:48:29,142:INFO:Preloading libraries
2023-12-24 04:48:29,254:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:48:29,257:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:48:29,263:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:48:53,516:INFO:Initializing finalize_model()
2023-12-24 04:48:53,517:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002068DB9EF80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2023-12-24 04:48:53,517:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 04:48:53,522:INFO:Initializing create_model()
2023-12-24 04:48:53,522:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002068DB9EF80>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 04:48:53,522:INFO:Checking exceptions
2023-12-24 04:48:53,528:INFO:Importing libraries
2023-12-24 04:48:53,528:INFO:Copying training dataset
2023-12-24 04:48:53,528:INFO:Defining folds
2023-12-24 04:48:53,528:INFO:Declaring metric variables
2023-12-24 04:48:53,528:INFO:Importing untrained model
2023-12-24 04:48:53,528:INFO:Declaring custom model
2023-12-24 04:48:53,530:INFO:Logistic Regression Imported successfully
2023-12-24 04:48:53,531:INFO:Cross validation set to False
2023-12-24 04:48:53,531:INFO:Fitting Model
2023-12-24 04:48:53,564:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 04:48:53,564:INFO:create_model() successfully completed......................................
2023-12-24 04:48:53,669:INFO:_master_model_container: 1
2023-12-24 04:48:53,669:INFO:_display_container: 3
2023-12-24 04:48:53,674:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 04:48:53,674:INFO:finalize_model() successfully completed......................................
2023-12-24 04:49:20,716:INFO:Initializing save_model()
2023-12-24 04:49:20,716:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_classifier, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-12-24 04:49:20,716:INFO:Adding model into prep_pipe
2023-12-24 04:49:20,716:WARNING:Only Model saved as it was a pipeline.
2023-12-24 04:49:20,724:INFO:modele_classifier.pkl saved in current working directory
2023-12-24 04:49:20,728:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 04:49:20,729:INFO:save_model() successfully completed......................................
2023-12-24 04:49:41,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:49:41,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:49:41,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:49:41,538:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:49:43,248:INFO:Initializing load_model()
2023-12-24 04:49:43,248:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 04:49:43,290:INFO:Initializing predict_model()
2023-12-24 04:49:43,290:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002428410FE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002428411FAC0>)
2023-12-24 04:49:43,290:INFO:Checking exceptions
2023-12-24 04:49:43,291:INFO:Preloading libraries
2023-12-24 04:49:43,291:INFO:Set up data.
2023-12-24 04:49:43,296:INFO:Set up index.
2023-12-24 04:51:41,573:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:51:41,573:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:51:41,573:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:51:41,573:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:51:44,649:INFO:Initializing load_model()
2023-12-24 04:51:44,650:INFO:load_model(model_name=modele_classifier, platform=None, authentication=None, verbose=True)
2023-12-24 04:51:44,658:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:51:44,663:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:51:44,665:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:51:44,720:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 04:54:57,917:INFO:PyCaret ClassificationExperiment
2023-12-24 04:54:57,918:INFO:Logging name: clf-default-name
2023-12-24 04:54:57,919:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-24 04:54:57,919:INFO:version 3.2.0
2023-12-24 04:54:57,920:INFO:Initializing setup()
2023-12-24 04:54:57,920:INFO:self.USI: d20e
2023-12-24 04:54:57,921:INFO:self._variable_keys: {'seed', 'log_plots_param', 'data', 'X', 'y_train', 'fix_imbalance', 'gpu_param', '_available_plots', 'target_param', 'y_test', 'logging_param', 'html_param', 'idx', 'exp_name_log', 'fold_groups_param', 'n_jobs_param', 'USI', 'fold_shuffle_param', 'exp_id', 'is_multiclass', 'fold_generator', 'X_test', 'pipeline', 'memory', '_ml_usecase', 'gpu_n_jobs_param', 'y', 'X_train'}
2023-12-24 04:54:57,922:INFO:Checking environment
2023-12-24 04:54:57,923:INFO:python_version: 3.10.11
2023-12-24 04:54:57,923:INFO:python_build: ('tags/v3.10.11:7d4cc5a', 'Apr  5 2023 00:38:17')
2023-12-24 04:54:57,924:INFO:machine: AMD64
2023-12-24 04:54:57,924:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-24 04:54:57,945:INFO:Memory: svmem(total=8269619200, available=599732224, percent=92.7, used=7669886976, free=599732224)
2023-12-24 04:54:57,947:INFO:Physical Core: 4
2023-12-24 04:54:57,947:INFO:Logical Core: 8
2023-12-24 04:54:57,948:INFO:Checking libraries
2023-12-24 04:54:57,952:INFO:System:
2023-12-24 04:54:57,954:INFO:    python: 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)]
2023-12-24 04:54:57,954:INFO:executable: C:\Users\morel\AppData\Local\Microsoft\WindowsApps\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\python.exe
2023-12-24 04:54:57,955:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-24 04:54:57,955:INFO:PyCaret required dependencies:
2023-12-24 04:54:57,961:INFO:                 pip: 23.0.1
2023-12-24 04:54:57,961:INFO:          setuptools: 65.5.0
2023-12-24 04:54:57,961:INFO:             pycaret: 3.2.0
2023-12-24 04:54:57,961:INFO:             IPython: 8.19.0
2023-12-24 04:54:57,961:INFO:          ipywidgets: 8.1.1
2023-12-24 04:54:57,961:INFO:                tqdm: 4.64.1
2023-12-24 04:54:57,961:INFO:               numpy: 1.23.4
2023-12-24 04:54:57,961:INFO:              pandas: 1.4.3
2023-12-24 04:54:57,961:INFO:              jinja2: 3.1.2
2023-12-24 04:54:57,961:INFO:               scipy: 1.10.1
2023-12-24 04:54:57,961:INFO:              joblib: 1.3.2
2023-12-24 04:54:57,961:INFO:             sklearn: 1.1.2
2023-12-24 04:54:57,961:INFO:                pyod: 1.1.2
2023-12-24 04:54:57,962:INFO:            imblearn: 0.11.0
2023-12-24 04:54:57,962:INFO:   category_encoders: 2.6.3
2023-12-24 04:54:57,962:INFO:            lightgbm: 4.2.0
2023-12-24 04:54:57,962:INFO:               numba: 0.58.1
2023-12-24 04:54:57,962:INFO:            requests: 2.28.1
2023-12-24 04:54:57,962:INFO:          matplotlib: 3.5.3
2023-12-24 04:54:57,962:INFO:          scikitplot: 0.3.7
2023-12-24 04:54:57,962:INFO:         yellowbrick: 1.5
2023-12-24 04:54:57,962:INFO:              plotly: 5.18.0
2023-12-24 04:54:57,962:INFO:    plotly-resampler: Not installed
2023-12-24 04:54:57,962:INFO:             kaleido: 0.2.1
2023-12-24 04:54:57,962:INFO:           schemdraw: 0.15
2023-12-24 04:54:57,962:INFO:         statsmodels: 0.13.2
2023-12-24 04:54:57,962:INFO:              sktime: 0.21.1
2023-12-24 04:54:57,962:INFO:               tbats: 1.1.3
2023-12-24 04:54:57,962:INFO:            pmdarima: 2.0.4
2023-12-24 04:54:57,962:INFO:              psutil: 5.9.7
2023-12-24 04:54:57,962:INFO:          markupsafe: 2.1.1
2023-12-24 04:54:57,962:INFO:             pickle5: Not installed
2023-12-24 04:54:57,962:INFO:         cloudpickle: 3.0.0
2023-12-24 04:54:57,962:INFO:         deprecation: 2.1.0
2023-12-24 04:54:57,963:INFO:              xxhash: 3.4.1
2023-12-24 04:54:57,963:INFO:           wurlitzer: Not installed
2023-12-24 04:54:57,963:INFO:PyCaret optional dependencies:
2023-12-24 04:54:57,963:INFO:                shap: Not installed
2023-12-24 04:54:57,963:INFO:           interpret: Not installed
2023-12-24 04:54:57,963:INFO:                umap: Not installed
2023-12-24 04:54:57,963:INFO:     ydata_profiling: Not installed
2023-12-24 04:54:57,963:INFO:  explainerdashboard: Not installed
2023-12-24 04:54:57,963:INFO:             autoviz: Not installed
2023-12-24 04:54:57,963:INFO:           fairlearn: Not installed
2023-12-24 04:54:57,963:INFO:          deepchecks: Not installed
2023-12-24 04:54:57,963:INFO:             xgboost: Not installed
2023-12-24 04:54:57,963:INFO:            catboost: Not installed
2023-12-24 04:54:57,963:INFO:              kmodes: Not installed
2023-12-24 04:54:57,963:INFO:             mlxtend: Not installed
2023-12-24 04:54:57,963:INFO:       statsforecast: Not installed
2023-12-24 04:54:57,963:INFO:        tune_sklearn: Not installed
2023-12-24 04:54:57,964:INFO:                 ray: Not installed
2023-12-24 04:54:57,964:INFO:            hyperopt: Not installed
2023-12-24 04:54:57,964:INFO:              optuna: Not installed
2023-12-24 04:54:57,964:INFO:               skopt: Not installed
2023-12-24 04:54:57,964:INFO:              mlflow: Not installed
2023-12-24 04:54:57,964:INFO:              gradio: Not installed
2023-12-24 04:54:57,964:INFO:             fastapi: Not installed
2023-12-24 04:54:57,964:INFO:             uvicorn: Not installed
2023-12-24 04:54:57,964:INFO:              m2cgen: Not installed
2023-12-24 04:54:57,964:INFO:           evidently: Not installed
2023-12-24 04:54:57,964:INFO:               fugue: Not installed
2023-12-24 04:54:57,964:INFO:           streamlit: 1.29.0
2023-12-24 04:54:57,964:INFO:             prophet: Not installed
2023-12-24 04:54:57,964:INFO:None
2023-12-24 04:54:57,966:INFO:Set up data.
2023-12-24 04:54:58,115:INFO:Set up folding strategy.
2023-12-24 04:54:58,122:INFO:Set up train/test split.
2023-12-24 04:54:58,162:INFO:Set up index.
2023-12-24 04:54:58,163:INFO:Assigning column types.
2023-12-24 04:54:58,175:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-24 04:54:58,260:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 04:54:58,278:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:54:58,338:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,343:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,400:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 04:54:58,401:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:54:58,429:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,430:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,431:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-24 04:54:58,517:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:54:58,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,563:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,632:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 04:54:58,669:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,669:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,669:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-24 04:54:58,763:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,765:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,850:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,850:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:58,874:INFO:Preparing preprocessing pipeline...
2023-12-24 04:54:58,878:INFO:Set up label encoding.
2023-12-24 04:54:58,878:INFO:Set up simple imputation.
2023-12-24 04:54:58,879:INFO:Set up feature normalization.
2023-12-24 04:54:58,975:INFO:Finished creating preprocessing pipeline.
2023-12-24 04:54:58,986:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicat...
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2023-12-24 04:54:58,986:INFO:Creating final display dataframe.
2023-12-24 04:54:59,124:INFO:Setup _display_container:                     Description                                   Value
0                    Session id                                    2023
1                        Target                                 Species
2                   Target type                              Multiclass
3                Target mapping  setosa: 0, versicolor: 1, virginica: 2
4           Original data shape                                (150, 5)
5        Transformed data shape                                (150, 5)
6   Transformed train set shape                                (105, 5)
7    Transformed test set shape                                 (45, 5)
8              Numeric features                                       4
9                    Preprocess                                    True
10              Imputation type                                  simple
11           Numeric imputation                                    mean
12       Categorical imputation                                    mode
13                    Normalize                                    True
14             Normalize method                                  zscore
15               Fold Generator                         StratifiedKFold
16                  Fold Number                                       5
17                     CPU Jobs                                      -1
18                      Use GPU                                   False
19               Log Experiment                                   False
20              Experiment Name                        clf-default-name
21                          USI                                    d20e
2023-12-24 04:54:59,296:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:59,297:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:59,392:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:59,392:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:54:59,401:INFO:setup() successfully completed in 1.55s...............
2023-12-24 04:55:13,560:INFO:gpu_param set to False
2023-12-24 04:55:13,714:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:55:13,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:55:13,794:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:55:13,794:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 04:55:23,178:INFO:Initializing create_model()
2023-12-24 04:55:23,179:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000206B1A7F9D0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 04:55:23,179:INFO:Checking exceptions
2023-12-24 04:55:23,283:INFO:Importing libraries
2023-12-24 04:55:23,285:INFO:Copying training dataset
2023-12-24 04:55:23,293:INFO:Defining folds
2023-12-24 04:55:23,293:INFO:Declaring metric variables
2023-12-24 04:55:23,302:INFO:Importing untrained model
2023-12-24 04:55:23,310:INFO:Logistic Regression Imported successfully
2023-12-24 04:55:23,325:INFO:Starting cross validation
2023-12-24 04:55:23,334:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2023-12-24 04:55:34,377:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,377:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,378:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,380:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,380:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,384:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,384:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,384:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,385:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,386:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,387:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,387:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,387:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,388:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,389:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:34,415:INFO:Calculating mean and std
2023-12-24 04:55:34,426:INFO:Creating metrics dataframe
2023-12-24 04:55:34,460:INFO:Finalizing model
2023-12-24 04:55:34,600:INFO:Uploading results into container
2023-12-24 04:55:34,601:INFO:Uploading model into container now
2023-12-24 04:55:34,632:INFO:_master_model_container: 1
2023-12-24 04:55:34,633:INFO:_display_container: 2
2023-12-24 04:55:34,634:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 04:55:34,634:INFO:create_model() successfully completed......................................
2023-12-24 04:55:42,336:INFO:Initializing predict_model()
2023-12-24 04:55:42,337:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000206B1A7F9D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000206B1A520E0>)
2023-12-24 04:55:42,337:INFO:Checking exceptions
2023-12-24 04:55:42,337:INFO:Preloading libraries
2023-12-24 04:55:42,449:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:42,452:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:55:42,454:WARNING:C:\Users\morel\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\LocalCache\local-packages\Python310\site-packages\sklearn\metrics\_classification.py:1386: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 04:56:01,799:INFO:Initializing plot_model()
2023-12-24 04:56:01,799:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000206B1A7F9D0>, system=True)
2023-12-24 04:56:01,799:INFO:Checking exceptions
2023-12-24 04:56:01,812:INFO:Preloading libraries
2023-12-24 04:56:01,813:INFO:Copying training dataset
2023-12-24 04:56:01,813:INFO:Plot type: feature
2023-12-24 04:56:02,106:INFO:Visual Rendered Successfully
2023-12-24 04:56:02,197:INFO:plot_model() successfully completed......................................
2023-12-24 04:56:12,463:INFO:Initializing finalize_model()
2023-12-24 04:56:12,463:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000206B1A7F9D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2023-12-24 04:56:12,465:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 04:56:12,469:INFO:Initializing create_model()
2023-12-24 04:56:12,469:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000206B1A7F9D0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 04:56:12,469:INFO:Checking exceptions
2023-12-24 04:56:12,471:INFO:Importing libraries
2023-12-24 04:56:12,471:INFO:Copying training dataset
2023-12-24 04:56:12,471:INFO:Defining folds
2023-12-24 04:56:12,471:INFO:Declaring metric variables
2023-12-24 04:56:12,471:INFO:Importing untrained model
2023-12-24 04:56:12,471:INFO:Declaring custom model
2023-12-24 04:56:12,472:INFO:Logistic Regression Imported successfully
2023-12-24 04:56:12,473:INFO:Cross validation set to False
2023-12-24 04:56:12,473:INFO:Fitting Model
2023-12-24 04:56:12,505:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 04:56:12,505:INFO:create_model() successfully completed......................................
2023-12-24 04:56:12,621:INFO:_master_model_container: 1
2023-12-24 04:56:12,622:INFO:_display_container: 3
2023-12-24 04:56:12,630:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 04:56:12,630:INFO:finalize_model() successfully completed......................................
2023-12-24 04:56:40,120:INFO:Initializing save_model()
2023-12-24 04:56:40,120:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_trained, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicat...
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-12-24 04:56:40,120:INFO:Adding model into prep_pipe
2023-12-24 04:56:40,120:WARNING:Only Model saved as it was a pipeline.
2023-12-24 04:56:40,126:INFO:modele_trained.pkl saved in current working directory
2023-12-24 04:56:40,138:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missi...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 04:56:40,139:INFO:save_model() successfully completed......................................
2023-12-24 04:59:23,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:59:23,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:59:23,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:59:23,051:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 04:59:27,420:INFO:Initializing load_model()
2023-12-24 04:59:27,420:INFO:load_model(model_name=modele_trained, platform=None, authentication=None, verbose=True)
2023-12-24 04:59:27,445:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LabelEncoder from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:59:27,448:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator SimpleImputer from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:59:27,450:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator StandardScaler from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:59:27,453:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 1.1.2 when using version 1.2.2. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:
https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations
  warnings.warn(

2023-12-24 04:59:27,528:WARNING:C:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\pycaret\internal\pipeline.py:145: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.3.1', 'setuptools': '68.2.2', 'pycaret': '3.2.0', 'IPython': '8.12.3', 'ipywidgets': '8.1.1', 'tqdm': '4.66.1', 'numpy': '1.24.4', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.31.0', 'matplotlib': '3.6.0', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.1', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.8.18', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.0.1', 'setuptools': '65.5.0', 'pycaret': '3.2.0', 'IPython': '8.19.0', 'ipywidgets': '8.1.1', 'tqdm': '4.64.1', 'numpy': '1.23.4', 'pandas': '1.4.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.1.2', 'pyod': '1.1.2', 'imblearn': '0.11.0', 'category_encoders': '2.6.3', 'lightgbm': '4.2.0', 'numba': '0.58.1', 'requests': '2.28.1', 'matplotlib': '3.5.3', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.18.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.13.2', 'sktime': '0.21.1', 'tbats': '1.1.3', 'pmdarima': '2.0.4', 'psutil': '5.9.7', 'markupsafe': '2.1.1', 'pickle5': 'Not installed', 'cloudpickle': '3.0.0', 'deprecation': '2.1.0', 'xxhash': '3.4.1', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.11', 'machine': 'AMD64'}}
  warnings.warn(

2023-12-24 05:52:13,952:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:52:13,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:52:13,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:52:13,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:52:14,988:INFO:PyCaret ClassificationExperiment
2023-12-24 05:52:14,988:INFO:Logging name: clf-default-name
2023-12-24 05:52:14,988:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-12-24 05:52:14,989:INFO:version 3.2.0
2023-12-24 05:52:14,989:INFO:Initializing setup()
2023-12-24 05:52:14,989:INFO:self.USI: 117a
2023-12-24 05:52:14,989:INFO:self._variable_keys: {'data', 'memory', 'X_train', 'y', 'exp_name_log', 'pipeline', 'fold_generator', 'X_test', 'seed', 'gpu_param', 'gpu_n_jobs_param', 'exp_id', 'logging_param', 'y_test', 'X', 'fold_shuffle_param', 'n_jobs_param', 'target_param', 'is_multiclass', 'y_train', 'fix_imbalance', 'html_param', 'log_plots_param', '_ml_usecase', 'idx', 'fold_groups_param', 'USI', '_available_plots'}
2023-12-24 05:52:14,989:INFO:Checking environment
2023-12-24 05:52:14,989:INFO:python_version: 3.8.18
2023-12-24 05:52:14,989:INFO:python_build: ('default', 'Sep 11 2023 13:39:12')
2023-12-24 05:52:14,989:INFO:machine: AMD64
2023-12-24 05:52:14,989:INFO:platform: Windows-10-10.0.22621-SP0
2023-12-24 05:52:14,989:INFO:Memory: svmem(total=8269619200, available=508829696, percent=93.8, used=7760789504, free=508829696)
2023-12-24 05:52:14,989:INFO:Physical Core: 4
2023-12-24 05:52:14,989:INFO:Logical Core: 8
2023-12-24 05:52:14,989:INFO:Checking libraries
2023-12-24 05:52:14,989:INFO:System:
2023-12-24 05:52:14,990:INFO:    python: 3.8.18 (default, Sep 11 2023, 13:39:12) [MSC v.1916 64 bit (AMD64)]
2023-12-24 05:52:14,990:INFO:executable: c:\Users\morel\anaconda3\envs\streamlit-en\python.exe
2023-12-24 05:52:14,990:INFO:   machine: Windows-10-10.0.22621-SP0
2023-12-24 05:52:14,990:INFO:PyCaret required dependencies:
2023-12-24 05:52:15,048:INFO:                 pip: 23.3.1
2023-12-24 05:52:15,048:INFO:          setuptools: 68.2.2
2023-12-24 05:52:15,048:INFO:             pycaret: 3.2.0
2023-12-24 05:52:15,048:INFO:             IPython: 8.12.3
2023-12-24 05:52:15,048:INFO:          ipywidgets: 8.1.1
2023-12-24 05:52:15,048:INFO:                tqdm: 4.66.1
2023-12-24 05:52:15,048:INFO:               numpy: 1.24.4
2023-12-24 05:52:15,048:INFO:              pandas: 1.5.3
2023-12-24 05:52:15,049:INFO:              jinja2: 3.1.2
2023-12-24 05:52:15,049:INFO:               scipy: 1.10.1
2023-12-24 05:52:15,049:INFO:              joblib: 1.3.2
2023-12-24 05:52:15,049:INFO:             sklearn: 1.2.2
2023-12-24 05:52:15,049:INFO:                pyod: 1.1.2
2023-12-24 05:52:15,049:INFO:            imblearn: 0.11.0
2023-12-24 05:52:15,049:INFO:   category_encoders: 2.6.3
2023-12-24 05:52:15,049:INFO:            lightgbm: 4.2.0
2023-12-24 05:52:15,049:INFO:               numba: 0.58.1
2023-12-24 05:52:15,049:INFO:            requests: 2.31.0
2023-12-24 05:52:15,049:INFO:          matplotlib: 3.6.0
2023-12-24 05:52:15,049:INFO:          scikitplot: 0.3.7
2023-12-24 05:52:15,049:INFO:         yellowbrick: 1.5
2023-12-24 05:52:15,049:INFO:              plotly: 5.18.0
2023-12-24 05:52:15,049:INFO:    plotly-resampler: Not installed
2023-12-24 05:52:15,049:INFO:             kaleido: 0.2.1
2023-12-24 05:52:15,049:INFO:           schemdraw: 0.15
2023-12-24 05:52:15,049:INFO:         statsmodels: 0.14.1
2023-12-24 05:52:15,049:INFO:              sktime: 0.21.1
2023-12-24 05:52:15,049:INFO:               tbats: 1.1.3
2023-12-24 05:52:15,049:INFO:            pmdarima: 2.0.4
2023-12-24 05:52:15,049:INFO:              psutil: 5.9.7
2023-12-24 05:52:15,049:INFO:          markupsafe: 2.1.3
2023-12-24 05:52:15,049:INFO:             pickle5: Not installed
2023-12-24 05:52:15,049:INFO:         cloudpickle: 3.0.0
2023-12-24 05:52:15,050:INFO:         deprecation: 2.1.0
2023-12-24 05:52:15,050:INFO:              xxhash: 3.4.1
2023-12-24 05:52:15,050:INFO:           wurlitzer: Not installed
2023-12-24 05:52:15,050:INFO:PyCaret optional dependencies:
2023-12-24 05:52:15,076:INFO:                shap: Not installed
2023-12-24 05:52:15,077:INFO:           interpret: Not installed
2023-12-24 05:52:15,077:INFO:                umap: Not installed
2023-12-24 05:52:15,077:INFO:     ydata_profiling: Not installed
2023-12-24 05:52:15,077:INFO:  explainerdashboard: Not installed
2023-12-24 05:52:15,077:INFO:             autoviz: Not installed
2023-12-24 05:52:15,077:INFO:           fairlearn: Not installed
2023-12-24 05:52:15,077:INFO:          deepchecks: Not installed
2023-12-24 05:52:15,077:INFO:             xgboost: Not installed
2023-12-24 05:52:15,077:INFO:            catboost: Not installed
2023-12-24 05:52:15,077:INFO:              kmodes: Not installed
2023-12-24 05:52:15,077:INFO:             mlxtend: Not installed
2023-12-24 05:52:15,077:INFO:       statsforecast: Not installed
2023-12-24 05:52:15,077:INFO:        tune_sklearn: Not installed
2023-12-24 05:52:15,077:INFO:                 ray: Not installed
2023-12-24 05:52:15,077:INFO:            hyperopt: Not installed
2023-12-24 05:52:15,077:INFO:              optuna: Not installed
2023-12-24 05:52:15,077:INFO:               skopt: Not installed
2023-12-24 05:52:15,077:INFO:              mlflow: Not installed
2023-12-24 05:52:15,078:INFO:              gradio: Not installed
2023-12-24 05:52:15,078:INFO:             fastapi: Not installed
2023-12-24 05:52:15,078:INFO:             uvicorn: Not installed
2023-12-24 05:52:15,078:INFO:              m2cgen: Not installed
2023-12-24 05:52:15,078:INFO:           evidently: Not installed
2023-12-24 05:52:15,078:INFO:               fugue: Not installed
2023-12-24 05:52:15,078:INFO:           streamlit: 1.29.0
2023-12-24 05:52:15,078:INFO:             prophet: Not installed
2023-12-24 05:52:15,078:INFO:None
2023-12-24 05:52:15,078:INFO:Set up data.
2023-12-24 05:52:15,095:INFO:Set up folding strategy.
2023-12-24 05:52:15,095:INFO:Set up train/test split.
2023-12-24 05:52:15,136:INFO:Set up index.
2023-12-24 05:52:15,139:INFO:Assigning column types.
2023-12-24 05:52:15,143:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-12-24 05:52:15,211:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 05:52:15,215:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 05:52:15,279:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,280:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,384:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-12-24 05:52:15,387:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 05:52:15,440:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,441:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,442:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-12-24 05:52:15,522:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 05:52:15,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,639:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-12-24 05:52:15,696:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,696:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,697:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-12-24 05:52:15,843:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,843:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,974:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,974:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:15,978:INFO:Preparing preprocessing pipeline...
2023-12-24 05:52:15,981:INFO:Set up label encoding.
2023-12-24 05:52:15,981:INFO:Set up simple imputation.
2023-12-24 05:52:15,981:INFO:Set up feature normalization.
2023-12-24 05:52:16,024:INFO:Finished creating preprocessing pipeline.
2023-12-24 05:52:16,031:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicat...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2023-12-24 05:52:16,031:INFO:Creating final display dataframe.
2023-12-24 05:52:16,194:INFO:Setup _display_container:                     Description                                   Value
0                    Session id                                    2023
1                        Target                                 Species
2                   Target type                              Multiclass
3                Target mapping  setosa: 0, versicolor: 1, virginica: 2
4           Original data shape                                (150, 5)
5        Transformed data shape                                (150, 5)
6   Transformed train set shape                                (105, 5)
7    Transformed test set shape                                 (45, 5)
8              Numeric features                                       4
9                    Preprocess                                    True
10              Imputation type                                  simple
11           Numeric imputation                                    mean
12       Categorical imputation                                    mode
13                    Normalize                                    True
14             Normalize method                                  zscore
15               Fold Generator                         StratifiedKFold
16                  Fold Number                                       5
17                     CPU Jobs                                      -1
18                      Use GPU                                   False
19               Log Experiment                                   False
20              Experiment Name                        clf-default-name
21                          USI                                    117a
2023-12-24 05:52:16,364:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:16,365:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:16,498:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:16,498:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:16,499:INFO:setup() successfully completed in 1.52s...............
2023-12-24 05:52:25,971:INFO:gpu_param set to False
2023-12-24 05:52:26,095:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:26,098:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:26,209:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:26,210:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-12-24 05:52:30,456:INFO:Initializing create_model()
2023-12-24 05:52:30,456:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4CC84D550>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 05:52:30,456:INFO:Checking exceptions
2023-12-24 05:52:30,490:INFO:Importing libraries
2023-12-24 05:52:30,490:INFO:Copying training dataset
2023-12-24 05:52:30,495:INFO:Defining folds
2023-12-24 05:52:30,495:INFO:Declaring metric variables
2023-12-24 05:52:30,499:INFO:Importing untrained model
2023-12-24 05:52:30,503:INFO:Logistic Regression Imported successfully
2023-12-24 05:52:30,519:INFO:Starting cross validation
2023-12-24 05:52:30,522:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2023-12-24 05:52:43,770:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,796:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,797:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,799:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,802:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,804:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,807:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,810:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,814:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,819:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,820:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,822:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,831:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,920:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,930:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:43,981:INFO:Calculating mean and std
2023-12-24 05:52:43,992:INFO:Creating metrics dataframe
2023-12-24 05:52:44,034:INFO:Finalizing model
2023-12-24 05:52:44,187:INFO:Uploading results into container
2023-12-24 05:52:44,189:INFO:Uploading model into container now
2023-12-24 05:52:44,232:INFO:_master_model_container: 1
2023-12-24 05:52:44,232:INFO:_display_container: 2
2023-12-24 05:52:44,233:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 05:52:44,234:INFO:create_model() successfully completed......................................
2023-12-24 05:52:51,363:INFO:Initializing predict_model()
2023-12-24 05:52:51,364:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4CC84D550>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E4DFCCBCA0>)
2023-12-24 05:52:51,365:INFO:Checking exceptions
2023-12-24 05:52:51,365:INFO:Preloading libraries
2023-12-24 05:52:51,461:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:51,463:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:51,465:WARNING:c:\Users\morel\anaconda3\envs\streamlit-en\lib\site-packages\sklearn\metrics\_classification.py:1396: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-12-24 05:52:57,631:INFO:Initializing plot_model()
2023-12-24 05:52:57,631:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4CC84D550>, system=True)
2023-12-24 05:52:57,631:INFO:Checking exceptions
2023-12-24 05:52:57,643:INFO:Preloading libraries
2023-12-24 05:52:57,643:INFO:Copying training dataset
2023-12-24 05:52:57,643:INFO:Plot type: feature
2023-12-24 05:52:57,984:INFO:Visual Rendered Successfully
2023-12-24 05:52:58,084:INFO:plot_model() successfully completed......................................
2023-12-24 05:53:01,669:INFO:Initializing finalize_model()
2023-12-24 05:53:01,669:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4CC84D550>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2023-12-24 05:53:01,670:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-12-24 05:53:01,681:INFO:Initializing create_model()
2023-12-24 05:53:01,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E4CC84D550>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2023, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2023-12-24 05:53:01,681:INFO:Checking exceptions
2023-12-24 05:53:01,683:INFO:Importing libraries
2023-12-24 05:53:01,683:INFO:Copying training dataset
2023-12-24 05:53:01,684:INFO:Defining folds
2023-12-24 05:53:01,684:INFO:Declaring metric variables
2023-12-24 05:53:01,684:INFO:Importing untrained model
2023-12-24 05:53:01,684:INFO:Declaring custom model
2023-12-24 05:53:01,685:INFO:Logistic Regression Imported successfully
2023-12-24 05:53:01,686:INFO:Cross validation set to False
2023-12-24 05:53:01,686:INFO:Fitting Model
2023-12-24 05:53:01,723:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 05:53:01,724:INFO:create_model() successfully completed......................................
2023-12-24 05:53:01,826:INFO:_master_model_container: 1
2023-12-24 05:53:01,826:INFO:_display_container: 3
2023-12-24 05:53:01,837:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 05:53:01,838:INFO:finalize_model() successfully completed......................................
2023-12-24 05:53:09,611:INFO:Initializing save_model()
2023-12-24 05:53:09,611:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=modele_trained, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\morel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicat...
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-12-24 05:53:09,611:INFO:Adding model into prep_pipe
2023-12-24 05:53:09,612:WARNING:Only Model saved as it was a pipeline.
2023-12-24 05:53:09,625:INFO:modele_trained.pkl saved in current working directory
2023-12-24 05:53:09,637:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=2023,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-12-24 05:53:09,637:INFO:save_model() successfully completed......................................
2023-12-24 05:55:24,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:55:24,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:55:24,940:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:55:24,941:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-12-24 05:55:26,784:INFO:Initializing load_model()
2023-12-24 05:55:26,784:INFO:load_model(model_name=modele_trained, platform=None, authentication=None, verbose=True)
2023-12-24 05:55:26,832:INFO:Initializing predict_model()
2023-12-24 05:55:26,832:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4008100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B4004820>)
2023-12-24 05:55:26,833:INFO:Checking exceptions
2023-12-24 05:55:26,834:INFO:Preloading libraries
2023-12-24 05:55:26,834:INFO:Set up data.
2023-12-24 05:55:26,842:INFO:Set up index.
2023-12-24 05:55:48,481:INFO:Initializing predict_model()
2023-12-24 05:55:48,481:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B3FEB160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D1F0>)
2023-12-24 05:55:48,481:INFO:Checking exceptions
2023-12-24 05:55:48,481:INFO:Preloading libraries
2023-12-24 05:55:48,482:INFO:Set up data.
2023-12-24 05:55:48,486:INFO:Set up index.
2023-12-24 05:55:56,074:INFO:Initializing predict_model()
2023-12-24 05:55:56,075:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4115760>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D8B0>)
2023-12-24 05:55:56,075:INFO:Checking exceptions
2023-12-24 05:55:56,075:INFO:Preloading libraries
2023-12-24 05:55:56,076:INFO:Set up data.
2023-12-24 05:55:56,080:INFO:Set up index.
2023-12-24 05:55:56,344:INFO:Initializing predict_model()
2023-12-24 05:55:56,345:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B401FF70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D040>)
2023-12-24 05:55:56,345:INFO:Checking exceptions
2023-12-24 05:55:56,345:INFO:Preloading libraries
2023-12-24 05:55:56,345:INFO:Set up data.
2023-12-24 05:55:56,349:INFO:Set up index.
2023-12-24 05:56:04,797:INFO:Initializing predict_model()
2023-12-24 05:56:04,799:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4118070>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D820>)
2023-12-24 05:56:04,799:INFO:Checking exceptions
2023-12-24 05:56:04,799:INFO:Preloading libraries
2023-12-24 05:56:04,799:INFO:Set up data.
2023-12-24 05:56:04,803:INFO:Set up index.
2023-12-24 05:56:05,048:INFO:Initializing predict_model()
2023-12-24 05:56:05,048:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B41120D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D160>)
2023-12-24 05:56:05,048:INFO:Checking exceptions
2023-12-24 05:56:05,048:INFO:Preloading libraries
2023-12-24 05:56:05,049:INFO:Set up data.
2023-12-24 05:56:05,051:INFO:Set up index.
2023-12-24 05:56:14,444:INFO:Initializing predict_model()
2023-12-24 05:56:14,444:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4110A60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D790>)
2023-12-24 05:56:14,444:INFO:Checking exceptions
2023-12-24 05:56:14,444:INFO:Preloading libraries
2023-12-24 05:56:14,446:INFO:Set up data.
2023-12-24 05:56:14,449:INFO:Set up index.
2023-12-24 05:56:14,699:INFO:Initializing predict_model()
2023-12-24 05:56:14,699:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133A03A6730>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411DA60>)
2023-12-24 05:56:14,700:INFO:Checking exceptions
2023-12-24 05:56:14,700:INFO:Preloading libraries
2023-12-24 05:56:14,701:INFO:Set up data.
2023-12-24 05:56:14,709:INFO:Set up index.
2023-12-24 05:56:45,977:INFO:Initializing predict_model()
2023-12-24 05:56:45,978:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4008CD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D280>)
2023-12-24 05:56:45,978:INFO:Checking exceptions
2023-12-24 05:56:45,978:INFO:Preloading libraries
2023-12-24 05:56:45,979:INFO:Set up data.
2023-12-24 05:56:45,983:INFO:Set up index.
2023-12-24 05:56:46,244:INFO:Initializing predict_model()
2023-12-24 05:56:46,245:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B401FEE0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411DB80>)
2023-12-24 05:56:46,245:INFO:Checking exceptions
2023-12-24 05:56:46,245:INFO:Preloading libraries
2023-12-24 05:56:46,245:INFO:Set up data.
2023-12-24 05:56:46,249:INFO:Set up index.
2023-12-24 05:56:55,189:INFO:Initializing predict_model()
2023-12-24 05:56:55,189:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B41122E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411DB80>)
2023-12-24 05:56:55,189:INFO:Checking exceptions
2023-12-24 05:56:55,189:INFO:Preloading libraries
2023-12-24 05:56:55,189:INFO:Set up data.
2023-12-24 05:56:55,194:INFO:Set up index.
2023-12-24 05:56:58,333:INFO:Initializing predict_model()
2023-12-24 05:56:58,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4112DF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D040>)
2023-12-24 05:56:58,334:INFO:Checking exceptions
2023-12-24 05:56:58,335:INFO:Preloading libraries
2023-12-24 05:56:58,335:INFO:Set up data.
2023-12-24 05:56:58,339:INFO:Set up index.
2023-12-24 05:56:58,578:INFO:Initializing predict_model()
2023-12-24 05:56:58,580:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4112AF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D670>)
2023-12-24 05:56:58,580:INFO:Checking exceptions
2023-12-24 05:56:58,580:INFO:Preloading libraries
2023-12-24 05:56:58,581:INFO:Set up data.
2023-12-24 05:56:58,584:INFO:Set up index.
2023-12-24 06:01:21,599:INFO:Initializing predict_model()
2023-12-24 06:01:21,602:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133A03A6160>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B408DD30>)
2023-12-24 06:01:21,602:INFO:Checking exceptions
2023-12-24 06:01:21,603:INFO:Preloading libraries
2023-12-24 06:01:21,606:INFO:Set up data.
2023-12-24 06:01:21,623:INFO:Set up index.
2023-12-24 06:01:40,712:INFO:Initializing predict_model()
2023-12-24 06:01:40,712:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133A03B60A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B408DB80>)
2023-12-24 06:01:40,712:INFO:Checking exceptions
2023-12-24 06:01:40,712:INFO:Preloading libraries
2023-12-24 06:01:40,713:INFO:Set up data.
2023-12-24 06:01:40,715:INFO:Set up index.
2023-12-24 06:02:03,073:INFO:Initializing predict_model()
2023-12-24 06:02:03,073:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133A03A6790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A44C0>)
2023-12-24 06:02:03,074:INFO:Checking exceptions
2023-12-24 06:02:03,074:INFO:Preloading libraries
2023-12-24 06:02:03,074:INFO:Set up data.
2023-12-24 06:02:03,077:INFO:Set up index.
2023-12-24 06:02:13,835:INFO:Initializing predict_model()
2023-12-24 06:02:13,836:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B3D4C5E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A00DC790>)
2023-12-24 06:02:13,836:INFO:Checking exceptions
2023-12-24 06:02:13,836:INFO:Preloading libraries
2023-12-24 06:02:13,837:INFO:Set up data.
2023-12-24 06:02:13,840:INFO:Set up index.
2023-12-24 06:02:22,843:INFO:Initializing predict_model()
2023-12-24 06:02:22,844:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133A00E4130>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A4160>)
2023-12-24 06:02:22,844:INFO:Checking exceptions
2023-12-24 06:02:22,844:INFO:Preloading libraries
2023-12-24 06:02:22,845:INFO:Set up data.
2023-12-24 06:02:22,847:INFO:Set up index.
2023-12-24 06:02:23,105:INFO:Initializing predict_model()
2023-12-24 06:02:23,107:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B407FDF0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A44C0>)
2023-12-24 06:02:23,107:INFO:Checking exceptions
2023-12-24 06:02:23,107:INFO:Preloading libraries
2023-12-24 06:02:23,108:INFO:Set up data.
2023-12-24 06:02:23,112:INFO:Set up index.
2023-12-24 06:02:54,460:INFO:Initializing predict_model()
2023-12-24 06:02:54,461:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4115D30>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A44C0>)
2023-12-24 06:02:54,461:INFO:Checking exceptions
2023-12-24 06:02:54,461:INFO:Preloading libraries
2023-12-24 06:02:54,461:INFO:Set up data.
2023-12-24 06:02:54,464:INFO:Set up index.
2023-12-24 06:03:04,672:INFO:Initializing predict_model()
2023-12-24 06:03:04,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B406E190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A43A0>)
2023-12-24 06:03:04,672:INFO:Checking exceptions
2023-12-24 06:03:04,672:INFO:Preloading libraries
2023-12-24 06:03:04,672:INFO:Set up data.
2023-12-24 06:03:04,675:INFO:Set up index.
2023-12-24 06:03:12,355:INFO:Initializing predict_model()
2023-12-24 06:03:12,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B40187F0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A4310>)
2023-12-24 06:03:12,355:INFO:Checking exceptions
2023-12-24 06:03:12,355:INFO:Preloading libraries
2023-12-24 06:03:12,355:INFO:Set up data.
2023-12-24 06:03:12,364:INFO:Set up index.
2023-12-24 06:03:19,707:INFO:Initializing predict_model()
2023-12-24 06:03:19,708:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B3D4C5E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A4310>)
2023-12-24 06:03:19,708:INFO:Checking exceptions
2023-12-24 06:03:19,709:INFO:Preloading libraries
2023-12-24 06:03:19,709:INFO:Set up data.
2023-12-24 06:03:19,714:INFO:Set up index.
2023-12-24 06:03:19,980:INFO:Initializing predict_model()
2023-12-24 06:03:19,980:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B400DA60>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A03A4310>)
2023-12-24 06:03:19,981:INFO:Checking exceptions
2023-12-24 06:03:19,981:INFO:Preloading libraries
2023-12-24 06:03:19,981:INFO:Set up data.
2023-12-24 06:03:19,988:INFO:Set up index.
2023-12-24 06:03:58,401:INFO:Initializing predict_model()
2023-12-24 06:03:58,402:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B41158E0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411DAF0>)
2023-12-24 06:03:58,402:INFO:Checking exceptions
2023-12-24 06:03:58,402:INFO:Preloading libraries
2023-12-24 06:03:58,403:INFO:Set up data.
2023-12-24 06:03:58,406:INFO:Set up index.
2023-12-24 06:04:11,794:INFO:Initializing predict_model()
2023-12-24 06:04:11,795:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4008C70>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133A00DC550>)
2023-12-24 06:04:11,795:INFO:Checking exceptions
2023-12-24 06:04:11,795:INFO:Preloading libraries
2023-12-24 06:04:11,795:INFO:Set up data.
2023-12-24 06:04:11,800:INFO:Set up index.
2023-12-24 06:05:02,567:INFO:Initializing predict_model()
2023-12-24 06:05:02,567:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133B4118FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411D1F0>)
2023-12-24 06:05:02,568:INFO:Checking exceptions
2023-12-24 06:05:02,568:INFO:Preloading libraries
2023-12-24 06:05:02,569:INFO:Set up data.
2023-12-24 06:05:02,572:INFO:Set up index.
2023-12-24 06:05:08,086:INFO:Initializing predict_model()
2023-12-24 06:05:08,086:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000133A03A6640>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['SepalLengthCm', 'SepalWidthCm',
                                             'PetalLengthCm', 'PetalWidthCm'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 LogisticRegression(max_iter=1000, random_state=2023))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000133B411DC10>)
2023-12-24 06:05:08,086:INFO:Checking exceptions
2023-12-24 06:05:08,086:INFO:Preloading libraries
2023-12-24 06:05:08,087:INFO:Set up data.
2023-12-24 06:05:08,090:INFO:Set up index.
